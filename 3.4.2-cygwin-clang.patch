--- origsrc/llvm-3.4.2.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp	2013-10-08 08:08:17.000000000 -0500
+++ src/llvm-3.4.2.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp	2014-07-28 00:31:38.227446500 -0500
@@ -345,7 +345,8 @@ static MCCodeGenInfo *createX86MCCodeGen
 
   // For static codegen, if we're not already set, use Small codegen.
   if (CM == CodeModel::Default)
-    CM = CodeModel::Small;
+    CM = (T.getOS() == Triple::Cygwin) && is64Bit ? CodeModel::Medium
+                                                  : CodeModel::Small;
   else if (CM == CodeModel::JITDefault)
     // 64-bit JIT places everything in the same buffer except external funcs.
     CM = is64Bit ? CodeModel::Large : CodeModel::Small;
--- origsrc/llvm-3.4.2.src/tools/clang/lib/Basic/Targets.cpp	2014-07-28 02:54:31.286586800 -0500
+++ src/llvm-3.4.2.src/tools/clang/lib/Basic/Targets.cpp	2014-07-27 19:26:52.518956400 -0500
@@ -3153,6 +3153,7 @@ public:
     Builder.defineMacro("_X86_");
     Builder.defineMacro("__CYGWIN__");
     Builder.defineMacro("__CYGWIN32__");
+    Builder.defineMacro("__declspec(a)", "__attribute__((a))");
     DefineStd(Builder, "unix", Opts);
     if (Opts.CPlusPlus)
       Builder.defineMacro("_GNU_SOURCE");
@@ -3370,6 +3371,35 @@ public:
 } // end anonymous namespace
 
 namespace {
+// x86-64 Cygwin target
+class CygwinX86_64TargetInfo : public X86_64TargetInfo {
+public:
+  CygwinX86_64TargetInfo(const llvm::Triple &Triple)
+      : X86_64TargetInfo(Triple) {
+    TLSSupported = false;
+    WCharType = UnsignedShort;
+  }
+  virtual void getTargetDefines(const LangOptions &Opts,
+                                MacroBuilder &Builder) const {
+    X86_64TargetInfo::getTargetDefines(Opts, Builder);
+    Builder.defineMacro("__CYGWIN__");
+    Builder.defineMacro("__declspec(a)", "__attribute__((a))");
+    DefineStd(Builder, "unix", Opts);
+    if (Opts.CPlusPlus)
+      Builder.defineMacro("_GNU_SOURCE");
+  }
+  virtual BuiltinVaListKind getBuiltinVaListKind() const {
+    return TargetInfo::CharPtrBuiltinVaList;
+  }
+  virtual CallingConvCheckResult checkCallingConvention(CallingConv CC) const {
+    return (CC == CC_C ||
+            CC == CC_IntelOclBicc ||
+            CC == CC_X86_64SysV) ? CCCR_OK : CCCR_Warning;
+  }
+};
+} // end anonymous namespace
+
+namespace {
 class DarwinX86_64TargetInfo : public DarwinTargetInfo<X86_64TargetInfo> {
 public:
   DarwinX86_64TargetInfo(const llvm::Triple &Triple)
@@ -5820,6 +5847,8 @@ static TargetInfo *AllocateTarget(const
       return new KFreeBSDTargetInfo<X86_64TargetInfo>(Triple);
     case llvm::Triple::Solaris:
       return new SolarisTargetInfo<X86_64TargetInfo>(Triple);
+    case llvm::Triple::Cygwin:
+      return new CygwinX86_64TargetInfo(Triple);
     case llvm::Triple::MinGW32:
       return new MinGWX86_64TargetInfo(Triple);
     case llvm::Triple::Win32:   // This is what Triple.h supports now.
--- origsrc/llvm-3.4.2.src/tools/clang/lib/Driver/Tools.cpp	2014-04-11 15:31:24.000000000 -0500
+++ src/llvm-3.4.2.src/tools/clang/lib/Driver/Tools.cpp	2014-08-07 14:43:01.635600000 -0500
@@ -3293,8 +3293,7 @@ void Clang::ConstructJob(Compilation &C,
   // -fuse-cxa-atexit is default.
   if (!Args.hasFlag(
            options::OPT_fuse_cxa_atexit, options::OPT_fno_use_cxa_atexit,
-           getToolChain().getTriple().getOS() != llvm::Triple::Cygwin &&
-               getToolChain().getTriple().getOS() != llvm::Triple::MinGW32 &&
+           getToolChain().getTriple().getOS() != llvm::Triple::MinGW32 &&
                getToolChain().getArch() != llvm::Triple::hexagon &&
                getToolChain().getArch() != llvm::Triple::xcore) ||
       KernelOrKext)
--- origsrc/llvm-3.4.2.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2014-07-28 02:54:31.291587400 -0500
+++ src/llvm-3.4.2.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2014-07-27 19:10:44.000000000 -0500
@@ -385,14 +385,14 @@ AddDefaultCPlusPlusIncludePaths(const ll
   case llvm::Triple::Win32:
     llvm_unreachable("Include management is handled in the driver.");
 
-  case llvm::Triple::Cygwin:
+  case llvm::Triple::Cygwin: {
+    std::string arch = triple.getArch() == llvm::Triple::x86_64 ? "x86_64" : "i686";
     // Cygwin-1.7
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.7.3");
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.5.3");
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.3.4");
-    // g++-4 / Cygwin-1.5
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.3.2");
+    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "4.9.2");
+    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "4.9.1");
+    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "4.8.3");
     break;
+  }
   case llvm::Triple::MinGW32:
     // mingw-w64 C++ include paths (i686-w64-mingw32 and x86_64-w64-mingw32)
     AddMinGW64CXXPaths(HSOpts.ResourceDir, "4.5.0");
--- origsrc/llvm-3.4.2.src/tools/clang/lib/Sema/TargetAttributesSema.cpp	2014-07-28 02:54:31.296088000 -0500
+++ src/llvm-3.4.2.src/tools/clang/lib/Sema/TargetAttributesSema.cpp	2014-07-27 19:10:44.000000000 -0500
@@ -257,6 +257,7 @@ namespace {
                               const AttributeList &Attr, Sema &S) const {
       const llvm::Triple &Triple(S.Context.getTargetInfo().getTriple());
       if (Triple.getOS() == llvm::Triple::Win32 ||
+          Triple.getOS() == llvm::Triple::Cygwin ||
           Triple.getOS() == llvm::Triple::MinGW32) {
         switch (Attr.getKind()) {
         case AttributeList::AT_DLLImport: HandleDLLImportAttr(D, Attr, S);

Change the InitHeaderSearch hunk when rebuilding for gcc update

--- origsrc/llvm-3.4.2.src/tools/clang/lib/Basic/Targets.cpp	2014-04-11 14:36:49.000000000 -0500
+++ src/llvm-3.4.2.src/tools/clang/lib/Basic/Targets.cpp	2014-07-21 18:11:53.255679200 -0500
@@ -3370,6 +3370,23 @@ public:
 } // end anonymous namespace
 
 namespace {
+// x86-64 Cygwin target
+class CygwinX86_64TargetInfo : public X86_64TargetInfo {
+public:
+  CygwinX86_64TargetInfo(const llvm::Triple &Triple)
+      : X86_64TargetInfo(Triple) {}
+  virtual void getTargetDefines(const LangOptions &Opts,
+                                MacroBuilder &Builder) const {
+    X86_64TargetInfo::getTargetDefines(Opts, Builder);
+    Builder.defineMacro("__CYGWIN__");
+    DefineStd(Builder, "unix", Opts);
+    if (Opts.CPlusPlus)
+      Builder.defineMacro("_GNU_SOURCE");
+  }
+};
+} // end anonymous namespace
+
+namespace {
 class DarwinX86_64TargetInfo : public DarwinTargetInfo<X86_64TargetInfo> {
 public:
   DarwinX86_64TargetInfo(const llvm::Triple &Triple)
@@ -5820,6 +5837,8 @@ static TargetInfo *AllocateTarget(const
       return new KFreeBSDTargetInfo<X86_64TargetInfo>(Triple);
     case llvm::Triple::Solaris:
       return new SolarisTargetInfo<X86_64TargetInfo>(Triple);
+    case llvm::Triple::Cygwin:
+      return new CygwinX86_64TargetInfo(Triple);
     case llvm::Triple::MinGW32:
       return new MinGWX86_64TargetInfo(Triple);
     case llvm::Triple::Win32:   // This is what Triple.h supports now.
--- origsrc/llvm-3.4.2.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2013-11-15 12:07:59.000000000 -0600
+++ src/llvm-3.4.2.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2014-07-21 20:42:37.374887800 -0500
@@ -385,14 +385,14 @@ AddDefaultCPlusPlusIncludePaths(const ll
   case llvm::Triple::Win32:
     llvm_unreachable("Include management is handled in the driver.");
 
-  case llvm::Triple::Cygwin:
+  case llvm::Triple::Cygwin: {
+    std::string arch = triple.getArch() == llvm::Triple::x86_64 ? "x86_64" : "i686";
     // Cygwin-1.7
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.7.3");
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.5.3");
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.3.4");
-    // g++-4 / Cygwin-1.5
-    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.3.2");
+    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "4.9.1");
+    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "4.9.0");
+    AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "4.8.3");
     break;
+  }
   case llvm::Triple::MinGW32:
     // mingw-w64 C++ include paths (i686-w64-mingw32 and x86_64-w64-mingw32)
     AddMinGW64CXXPaths(HSOpts.ResourceDir, "4.5.0");
--- origsrc/llvm-3.4.2.src/tools/clang/lib/Sema/TargetAttributesSema.cpp	2013-10-01 09:34:25.000000000 -0500
+++ src/llvm-3.4.2.src/tools/clang/lib/Sema/TargetAttributesSema.cpp	2014-07-18 00:02:50.234889300 -0500
@@ -257,6 +257,7 @@ namespace {
                               const AttributeList &Attr, Sema &S) const {
       const llvm::Triple &Triple(S.Context.getTargetInfo().getTriple());
       if (Triple.getOS() == llvm::Triple::Win32 ||
+          Triple.getOS() == llvm::Triple::Cygwin ||
           Triple.getOS() == llvm::Triple::MinGW32) {
         switch (Attr.getKind()) {
         case AttributeList::AT_DLLImport: HandleDLLImportAttr(D, Attr, S);
